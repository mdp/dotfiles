# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi

if [ -f /home/linuxbrew/.linuxbrew/bin/brew ]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

if [ -d "$HOME/.cargo" ] ; then
    . "$HOME/.cargo/env"
fi

if [ -d "/usr/local/go" ] ; then
    export PATH=$PATH:/usr/local/go/bin
fi

export ASDF_DIR="$HOME/.asdf"
if [ -d $ASDF_DIR ] ; then
    export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"
    # Load completion based on current shell
    if [ -n "$ZSH_VERSION" ]; then
        . <(asdf completion zsh)
    elif [ -n "$BASH_VERSION" ]; then
        . <(asdf completion bash)
    fi
fi

export PATH="$HOME/.local/bin:$PATH"

# SSH agent setup - only run outside of tmux
if [ -z "$TMUX" ]; then
    # Create SSH directory if it doesn't exist
    if [ ! -d "$HOME/.ssh" ]; then
        mkdir -p "$HOME/.ssh"
        chmod 700 "$HOME/.ssh"
    fi

    # Fixed socket path
    SSH_AUTH_SOCK_LINK="$HOME/.ssh/ssh_auth_sock"

    # Function to check if agent is working
    ssh_agent_is_working() {
        [ -n "$SSH_AUTH_SOCK" ] && [ -S "$SSH_AUTH_SOCK" ] && ssh-add -l >/dev/null 2>&1
        return $?
    }

    # Try using existing symlink first
    if [ -L "$SSH_AUTH_SOCK_LINK" ] && [ -S "$SSH_AUTH_SOCK_LINK" ]; then
        export SSH_AUTH_SOCK="$SSH_AUTH_SOCK_LINK"
        if ssh_agent_is_working; then
            # Agent is working, we're done
            :
        else
            # Symlink exists but agent is dead, remove it
            rm -f "$SSH_AUTH_SOCK_LINK"
        fi
    fi

    # Check if current SSH_AUTH_SOCK is working
    if ! ssh_agent_is_working; then
        # Try to find existing agent via launchctl (macOS)
        if command -v launchctl >/dev/null 2>&1; then
            EXISTING_SOCK=$(launchctl getenv SSH_AUTH_SOCK 2>/dev/null)
            if [ -n "$EXISTING_SOCK" ] && [ -S "$EXISTING_SOCK" ]; then
                export SSH_AUTH_SOCK="$EXISTING_SOCK"
                if ssh_agent_is_working; then
                    ln -sf "$SSH_AUTH_SOCK" "$SSH_AUTH_SOCK_LINK"
                    export SSH_AUTH_SOCK="$SSH_AUTH_SOCK_LINK"
                fi
            fi
        fi
    fi

    # If still no working agent, start a new one
    if ! ssh_agent_is_working; then
        echo "Starting new SSH agent..."
        eval "$(ssh-agent -s)"
        ln -sf "$SSH_AUTH_SOCK" "$SSH_AUTH_SOCK_LINK"
        export SSH_AUTH_SOCK="$SSH_AUTH_SOCK_LINK"
    fi
fi

if [ -d "$HOME/.lmstudio" ] ; then
    export PATH="$PATH:/Users/mdp/.lmstudio/bin"
fi

